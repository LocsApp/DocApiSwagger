swagger: '2.0'
info:
  title: LocsApp API
  description: Api in development for LocsApp
  version: 1.0.0
host: '127.0.0.1:8000'
schemes:
  - http
basePath: /api/v1
produces:
  - application/json
paths:
  /rest-auth/registration/:
    post:
      summary: Register an user
      description: >
        The register endpoint returns a key corresponding to an authentication
        token.

        Or an error if they were a problem
      parameters:
        - name: email
          in: body
          description: Email of the new user
          required: true
          type: string
        - name: username
          in: body
          description: Username of the new user
          required: true
          type: string
        - name: password1
          in: body
          description: Password of the new user
          required: true
          type: string
        - name: password2
          in: body
          description: Confirm password of the new user
          required: true
          type: string
      tags:
        - Users
        - Register
      responses:
        '201':
          description: Created
          schema:
            type: array
            items:
              $ref: '#/definitions/Key'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorRegister'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/login/:
    post:
      summary: Log an user to get an authentication token
      description: |
        The login endpoint returs a Token and an HTTP status code. Or an error
        with the http status corresponding to it
      parameters:
        - name: username
          in: body
          description: Username of the new user
          required: true
          type: string
        - name: password
          in: body
          description: Password of the new user
          required: true
          type: string
      tags:
        - Users
        - Login
      responses:
        '200':
          description: Return an authentication token
          schema:
            type: array
            items:
              $ref: '#/definitions/Key'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/NonFieldErrors'
        also 400:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorLogin2'
  /rest-auth/logout/:
    post:
      summary: Logout the connected User
      description: This endpoint lets you log out an user using his token. If the token is not provided the return of the endpoint will be 200. And if a token is provided and does not exist the return will be 401
      tags:
        - Users
        - Logout
        - Token
      responses:
        '200':
          description: A success message
          schema:
            $ref: '#/definitions/Logout'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/user/:
    get:
      summary: User Profile
      description: The User Profile endpoint returns information about the Uber user that has authorized with the application.
      tags:
        - Users
        - Token
      responses:
        '200':
          description: Profile information for a user
          schema:
            $ref: '#/definitions/User'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
    put:
      summary: User Profile
      description: The User Profile endpoint returns information about the Uber user that has authorized with the application.
      parameters:
        - name: first_name
          in: body
          required: false
          type: string
        - name: last_name
          in: body
          required: false
          type: string
        - name: birthdate
          in: body
          required: false
          type: string
        - name: phone
          in: body
          required: false
          type: string
        - name: living_address
          in: body
          required: false
          type: string
        - name: registered_date
          in: body
          required: false
          type: string
        - name: billing_address
          in: body
          required: false
          type: string
      tags:
        - Users
        - Token
      responses:
        '200':
          description: Profile information for a user
          schema:
            $ref: '#/definitions/User'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/password/change/:
    post:
      summary: Change password of a connected user
      description: nothing to say
      parameters:
        - name: old_password
          in: body
          required: true
          type: string
        - name: new_password1
          in: body
          required: true
          type: string
        - name: new_password2
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Password
      responses:
        '200':
          description: Succes change password
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/PasswordChangeError'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/password/reset/:
    post:
      summary: Ask for a new password
      description: >
        When using this endpoint a mail will be sent so the user can have a new
        password. The user change his password with a call to a link.
      parameters:
        - name: email
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Password
      responses:
        '200':
          description: Succes change password
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/PasswordResetError'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/password/reset/confirm/:
    post:
      summary: Confirm the  new password
      description: null
      parameters:
        - name: new_password1
          in: body
          required: true
          type: string
        - name: new_password2
          in: body
          required: true
          type: string
        - name: uid
          in: body
          required: true
          type: string
        - name: token
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Password
      responses:
        '200':
          description: Succes change password
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/PasswordResetConfirmError'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /auth/facebook-register/:
    post:
      summary: Create a new user with his Facebook account
      description: >
        . The application code is 1011661268854723 (you can find it with the user
        locsapp in the django admin or on Facebook). For the access token you
        have to ask to facebook see the Facebook documentation or you can have
        a token here for your test
        https://developers.facebook.com/tools/explorer/
      parameters:
        - name: facebook_token
          in: body
          required: true
          type: string
        - name: username
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Facebook
        - Register
      responses:
        '200':
          description: Success register user with his Facebook
          schema:
            $ref: '#/definitions/SuccessGeneral'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /auth/facebook-login/:
    post:
      summary: Create a new user with his Facebook account
      description: >
        . The application code is 1011661268854723 (you can find it with the user
        locsapp in the django admin or on Facebook). For the access token you
        have to ask to facebook see the Facebook documentation or you can have
        a token here for your test
        https://developers.facebook.com/tools/explorer/
      parameters:
        - name: facebook_token
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Facebook
        - Login
      responses:
        '200':
          description: Succes change password
          schema:
            $ref: '#/definitions/Key'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/ErrorGeneral'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /user/add-email/:
    post:
      summary: Add a new mail in the secondary_email field
      description: >
        A user can have several emails. When he add a new address mail
        a confirmation email is sent. You can also use this endpoint to resend
        a mail confirmation.
      parameters:
        - name: new_email
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Email
      responses:
        '200':
          description: Succes add email
          schema:
            $ref: '#/definitions/SucessEmail'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /user/delete-email/:
    post:
      summary: Delete email in the secondary_email field
      description: |
        nothing to say
      parameters:
        - name: email
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Email
      responses:
        '200':
          description: Succes delete secondary email
          schema:
            $ref: '#/definitions/SucessEmail'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /user/set-primary-email/:
    post:
      summary: Set the primary email
      description: |
        nothing to say
      parameters:
        - name: email
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Email
      responses:
        '200':
          description: Succes change primary email
          schema:
            $ref: '#/definitions/User'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /user/userId/living_addresses/:
    post:
      summary: >
        Create a new living address. For know which JSON to pass to the post
        method please see this link
        https://docs.google.com/document/d/18eKXXRaQT0eo1BpAGzZrMGphYfuM4W_Ox8g5WD3Pm6U/edit#heading=h.bu2y3b2weni8
      description: |
        nothing to say
      tags:
        - Users
        - Token
        - Address
      responses:
        '200':
          description: Success add address
          schema:
            $ref: '#/definitions/User'
        40x:
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
    get:
      summary: Get living address for an user
      description: |
        nothing to say
      tags:
        - Users
        - Token
        - Address
      responses:
        '200':
          description: Succes get living address
          schema:
            $ref: '#/definitions/SuccessLivingAddress'
        40x:
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /user/userId/living_addresses/delete/:
    post:
      summary: Delete a living addresses
      description: >
        You have to pass the same JSON from the POST at the route
        /user/userID/living_addresses/
      tags:
        - Users
        - Token
        - Address
      responses:
        '200':
          description: Succes delete living address
          schema:
            $ref: '#/definitions/User'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /user/userId/billing_addresses/:
    post:
      summary: >
        Create a new billing address. For know which JSON to pass to the post
        method please see this link
        https://docs.google.com/document/d/18eKXXRaQT0eo1BpAGzZrMGphYfuM4W_Ox8g5WD3Pm6U/edit#heading=h.4uj0q6ixe0mi
      description: |
        nothing to say
      tags:
        - Users
        - Token
        - Address
      responses:
        '200':
          description: Success add billing address
          schema:
            $ref: '#/definitions/User'
        40x:
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
    get:
      summary: Get a billing address for an user
      description: |
        nothing to say
      tags:
        - Users
        - Token
        - Address
      responses:
        '200':
          description: Succes get living address
          schema:
            $ref: '#/definitions/SuccessBillingAddress'
        40x:
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /user/userId/billing_addresses/delete/:
    post:
      summary: Delete a billing addresses
      description: |
        You have to pass the same JSON from the POST at the route
         /user/userID/billing_addresses/
      tags:
        - Users
        - Token
        - Address
      responses:
        '200':
          description: Succes delete billing address
          schema:
            $ref: '#/definitions/User'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /notifications/noficationId/:
    get:
      summary: Get an user notification
      description: |
        nothing to say
      tags:
        - Users
        - Token
        - Notification
      responses:
        '200':
          description: Get a user notification by id
          schema:
            $ref: '#/definitions/Notification'
        '40*':
          description: NOT FOUND
          schema:
            $ref: '#/definitions/ErrorGeneral'
    put:
      summary: Modify a notification
      description: |
        nothing to say
      parameters:
        - name: read
          in: body
          required: true
          type: boolean
        - name: visible
          in: body
          required: true
          type: boolean
        - name: user_id
          in: body
          required: true
          type: integer
        - name: type
          in: body
          required: true
          type: string
        - name: state_url
          in: body
          required: true
          type: string
        - name: content
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Notification
      responses:
        '200':
          description: Put a user notification by id
          schema:
            $ref: '#/definitions/SuccessGeneral'
        '40*':
          description: NOT FOUND
          schema:
            $ref: '#/definitions/ErrorGeneral'
  /search/articles/:
    post:
      summary: This endpoints serves the searching of articles depending on a configured schema sent to the endpoint.
      description: >
        This is the search endpoint for the articles. It handles pagination,
        sorting, and array filters. Some fields don't follow the same patterns as
        the others, but for most of them it is array filters.
      tags:
        - Articles
        - Token
      responses:
        '200':
          description: Get the articles asked in the schema.
          schema:
            $ref: '#/definitions/ArticlesArray'
        '40*':
          description: NOT FOUND
          schema:
            $ref: '#/definitions/ErrorGeneral'
  '/articles/:id':
    get:
      summary: Get an article with its id
      description: |
        nothing to say
      tags:
        - Articles
      responses:
        '200':
          description: Succes getting the artcile
          schema:
            $ref: '#/definitions/Article'
        40x:
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorGeneral'
            
            
  
  /articles/create/:
    post:
      summary: Create an article
      description: >
        Nothing to say
      parameters:
        - name: title
          in: body
          description: Title of this artcle
          required: true
          type: string
        - name: base_category
          in: body
          description: Category of article 
          required: true
          type: ObjectId
        - name: sub_category
          in: body
          description: 
          required: true
          type: ObjectId
        - name: gender
          in: body
          description: 
          required: true
          type: ObjectId
        - name : size
          in: body
          required: true
          type: ObjectId
        - name : color
          in: body
          required: true
          type: ObjectId
        - name : clote_condition
          in: body
          required: true
          type: ObjectId
        - name : brand
          in: body
          required: true
          type: ObjectId
        - name : description
          in: body
          required: true
          type: string
        - name : price
          in: body
          required: true
          type: int  
        - name : payment_methods
          in: body
          required: true
          type: ObjectId array
        - name : availibility_start
          in: body
          required: true
          type: string
        - name : availibility_end
          in: body
          required: true
          type: string  
        - name : url_pictures
          in: body
          required: true
          type: array string
        - name : url_thumbnail
          in: body
          required: true
          type: string  
          
        
      tags:
        - Articles
      responses:
        '201':
          description: Created
          schema:
            type: array
            items:
              $ref: '#/definitions/SuccessGeneral'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorGeneral'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  
  
            
 
 
 
 
  /userId/nofications/:
    get:
      summary: Get all notification for one user
      description: >
        It is the same from the precedente route except you get all the
        notification of one user and it is an array. To see an example of the
        JSON go here
        https://docs.google.com/document/d/18eKXXRaQT0eo1BpAGzZrMGphYfuM4W_Ox8g5WD3Pm6U/edit#heading=h.yekxlnmnb27v
      tags:
        - Users
        - Token
        - Notification
      responses:
        '200':
          description: Get all the notifications for a user
          schema:
            $ref: '#/definitions/NotificationArray'
        '40*':
          description: NOT FOUND
          schema:
            $ref: '#/definitions/ErrorGeneral'
    post:
      summary: Post a notification for an user
      description: |
        nothing to say
      parameters:
        - name: type
          in: body
          required: true
          type: string
        - name: content
          in: body
          required: true
          type: string
        - name: state_url
          in: body
          required: true
          type: string
        - name: read
          in: body
          required: true
          type: boolean
        - name: visible
          in: body
          required: true
          type: boolean
        - name: userId
          in: body
          required: true
          type: integer
      tags:
        - Users
        - Token
        - Notification
      responses:
        '200':
          description: Get all the notifications for a user
          schema:
            $ref: '#/definitions/SuccessGeneral'
        '40*':
          description: NOT FOUND
          schema:
            $ref: '#/definitions/ErrorGeneral'
definitions:
  Key:
    type: object
    properties:
      key:
        type: String
        description: Access Token
  User:
    type: object
    properties:
      username:
        type: string
        description: Username of the user
      email:
        type: email
      secondary_emails:
        type: array
      first_name:
        type: string
      last_name:
        type: string
      birthdate:
        type: string
      phone:
        type: string
      living_address:
        type: array
      registered_date:
        type: string
      last_activity_date:
        type: string
      billing_address:
        type: array
      logo_url:
        type: string
      is_active:
        type: boolean
      role:
        type: string
  Success:
    type: object
    properties:
      success:
        type: string
  PasswordChangeError:
    type: object
    properties:
      old_password:
        type: array
      new_password1:
        type: array
      new_password2:
        type: array
  PasswordResetError:
    type: object
    properties:
      email:
        type: array
  PasswordResetConfirmError:
    type: object
    properties:
      new_password1:
        type: array
      new_password2:
        type: array
      uid:
        type: array
      token:
        type: array
  ErrorUnAuthorized:
    type: object
    properties:
      detail:
        type: string
        description: Invalid token.
  ErrorRegister:
    type: object
    properties:
      email:
        type: array
      username:
        type: array
  NonFieldErrors:
    type: object
    properties:
      non_field_errors:
        type: array
  ErrorLogin2:
    type: object
    properties:
      password:
        type: array
  ErrorGeneral:
    type: object
    properties:
      message:
        type: string
  SuccessGeneral:
    type: object
    properties:
      message:
        type: string
  SucessEmail:
    type: object
    properties:
      message:
        type: string
  SuccessLivingAddress:
    type: object
    properties:
      billing_address:
        type: array
  Notification:
    type: object
    properties:
      read:
        type: boolean
      _id:
        type: string
      visible:
        type: boolean
      type:
        type: string
      state_url:
        type: string
      user_id:
        type: integer
      date:
        type: string
      content:
        type: string
  NotificationArray:
    type: array
    properties:
      read:
        type: boolean
      _id:
        type: string
      visible:
        type: boolean
      type:
        type: string
      state_url:
        type: string
      user_id:
        type: integer
      date:
        type: string
      content:
        type: string
    
  Article:
    type: object
    properties:
      _id:
        type: objectId
      gender:
        type: objectId
      payment_methods:
        type: array ObjectId
      brand:
        type: ObjectId
      color:
        type: OjectId
      creation_date:
        type: isodate
      clothe_condition:
        type: ObjectId
      size:
        type: ObjectId
      availibility_start:
        type: string
      availibility_end:
        type: string
      url_thumbnail:
        type: string
      sub_category:
        type: ObjectId
      id_author:
        type: number id
      description:
        type: html
      price:
        type: int
      url_pictures:
        type: array url
      title:
        type: string
      base_category:
        type: ObjectId



  ArticlesSearchSchema:
    type: object
    properties:
      metadatas:
        type: object
        properties:
          page_number:
            type: integer
          total_paged:
            type: integer
      articles:
        type: array
        properties:
          _id:
            type: string   
        
