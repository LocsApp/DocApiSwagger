swagger: '2.0'
info:
  title: LocsApp API
  description: Api in development for LocsApp
  version: 1.0.0
host: '127.0.0.1:8000'
schemes:
  - http
basePath: /api/v1
produces:
  - application/json
paths:
  /rest-auth/registration/:
    post:
      summary: Register an user
      description: >
        The register endpoint returns a key corresponding to an authentication
        token.

        Or an error if they were a problem
      parameters:
        - name: email
          in: body
          description: Email of the new user
          required: true
          type: string
        - name: username
          in: body
          description: Username of the new user
          required: true
          type: string
        - name: password1
          in: body
          description: Password of the new user
          required: true
          type: string
        - name: password2
          in: body
          description: Confirm password of the new user
          required: true
          type: string
      tags:
        - Users
        - Register
      responses:
        '201':
          description: Created
          schema:
            type: array
            items:
              $ref: '#/definitions/Key'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorRegister'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/login/:
    post:
      summary: Log an user to get an authentication token
      description: |
        The login endpoint returs a Token and an HTTP status code. Or an error
        with the http status corresponding to it
      parameters:
        - name: username
          in: body
          description: Username of the new user
          required: true
          type: string
        - name: password
          in: body
          description: Password of the new user
          required: true
          type: string
      tags:
        - Users
        - Login
      responses:
        '200':
          description: Return an authentication token
          schema:
            type: array
            items:
              $ref: '#/definitions/Key'
        '400':
          description: Bad request
          schema:
            $ref: '#/definitions/NonFieldErrors'
        also 400:
          description: Bad request
          schema:
            $ref: '#/definitions/ErrorLogin2'
  /rest-auth/logout/:
    post:
      summary: Logout the connected User
      description: This endpoint lets you log out an user using his token. If the token is not provided the return of the endpoint will be 200. And if a token is provided and does not exist the return will be 401
      tags:
        - Users
        - Logout
        - Token
      responses:
        '200':
          description: A success message
          schema:
            $ref: '#/definitions/Logout'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/user/:
    get:
      summary: User Profile
      description: The User Profile endpoint returns information about the Uber user that has authorized with the application.
      tags:
        - Users
        - Token
      responses:
        '200':
          description: Profile information for a user
          schema:
            $ref: '#/definitions/User'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
    put:
      summary: User Profile
      description: The User Profile endpoint returns information about the Uber user that has authorized with the application.
      parameters:
        - name: first_name
          in: body
          required: false
          type: string
        - name: last_name
          in: body
          required: false
          type: string
        - name: birthdate
          in: body
          required: false
          type: string
        - name: phone
          in: body
          required: false
          type: string
        - name: living_address
          in: body
          required: false
          type: string
        - name: registered_date
          in: body
          required: false
          type: string
        - name: billing_address
          in: body
          required: false
          type: string
      tags:
        - Users
        - Token
      responses:
        '200':
          description: Profile information for a user
          schema:
            $ref: '#/definitions/User'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/password/change/:
    post:
      summary: Change password of a connected user
      description: nothing to say
      parameters:
        - name: old_password
          in: body
          required: true
          type: string
        - name: new_password1
          in: body
          required: true
          type: string
        - name: new_password2
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Password
      responses:
        '200':
          description: Succes change password
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/PasswordChangeError'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/password/reset/:
    post:
      summary: Ask for a new password
      description: >
        When using this endpoint a mail will be sent so the user can have a new
        password. The user change his password with a call to a link.
      parameters:
        - name: email
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Password
      responses:
        '200':
          description: Succes change password
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/PasswordResetError'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  /rest-auth/password/reset/confirm/:
    post:
      summary: Confirm the  new password
      description: null
      parameters:
        - name: new_password1
          in: body
          required: true
          type: string
        - name: new_password2
          in: body
          required: true
          type: string
        - name: uid
          in: body
          required: true
          type: string
        - name: token
          in: body
          required: true
          type: string
      tags:
        - Users
        - Token
        - Password
      responses:
        '200':
          description: Succes change password
          schema:
            $ref: '#/definitions/Success'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/PasswordResetConfirmError'
        '401':
          description: UNAUTHORIZED
          schema:
            $ref: '#/definitions/ErrorUnAuthorized'
  
  /rest-auth/facebook/:
    post:
      summary: Create a new user with his Facebook account
      description: >
        If the user is not registered you need to pass the username field otherwise you will have an error.
        The application code is 1011661268854723 (you can find it with the user locsapp in the django admin or on Facebook).
        For the access token you have to ask to facebook see the Facebook documentation or you can have a token here for
        your test https://developers.facebook.com/tools/explorer/
      
      parameters:
        - name: access_token
          in: body
          required: true
          type: string
        - name: code
          in: body
          required: true
          type: string
        - name: username
          in: body
          required: false
          type: string
      tags:
        - Users
        - Token
        - Facebook
      responses:
        '200':
          description: Succes change password
          schema:
            $ref: '#/definitions/Key'
        '400':
          description: BAD REQUEST
          schema:
            $ref: '#/definitions/NonFieldErrors'
     
definitions:
  Key:
    type: object
    properties:
      key:
        type: String
        description: Access Token
  User:
    type: object
    properties:
      username:
        type: string
        description: Username of the user
      email:
        type: email
      secondary_emails:
        type: array
      first_name:
        type: string
      last_name:
        type: string
      birthdate:
        type: string
      phone:
        type: string
      living_address:
        type: array
      registered_date:
        type: string
      last_activity_date:
        type: string
      billing_address:
        type: array
      logo_url:
        type: string
      is_active:
        type: boolean
      role:
        type: string
  Success:
    type: object
    properties:
      success:
        type: string
  PasswordChangeError:
    type: object
    properties:
      old_password:
        type: array
      new_password1:
        type: array
      new_password2:
        type: array
  PasswordResetError:
    type: object
    properties:
      email:
        type: array
  PasswordResetConfirmError:
    type: object
    properties:
      new_password1:
        type: array
      new_password2:
        type: array
      uid:
        type: array
      token:
        type: array
  ErrorUnAuthorized:
    type: object
    properties:
      detail:
        type: string
        description: Invalid token.
  ErrorRegister:
    type: object
    properties:
      email:
        type: array
      username:
        type: array
  NonFieldErrors:
    type: object
    properties:
      non_field_errors:
        type: array
  ErrorLogin2:
    type: object
    properties:
      password:
        type: array
